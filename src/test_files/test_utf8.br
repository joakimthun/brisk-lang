pkg main

// wCodePageID: 65001 == Unicode (UTF-8)
ext fn SetConsoleOutputCP(i32 wCodePageID) -> i32

ext fn puts(u8 *str) -> i32
ext fn putchar(i32 character) -> i32
ext fn exit(i32 status) -> void

// Varargs not yest supported...
ext fn printf(u8 *format, i32 arg) -> i32

//fn myfn(i32 arg1, i32 arg2, i32 arg3, i32 arg4) -> i32 {
//	//u8 x1 = 1
//	//i8 x2 = 1
//	//u16 x3 = 1
//	//i16 x4 = 1
//	//u32 x5= 1
//	//i32 x6 = 1
//	//u64 x7 = 1
//	//i64 x8 = 1
//	//let x9 = 1
//
//	u8 x_u8 = 1
//	u8 y_u8 = 1
//	u8 res_u8 = x_u8 - y_u8
//
//	i8 x_i8 = 1
//	i8 y_i8 = 1
//	i8 res_i8 = x_i8 - y_i8
//
//	u16 x_u16 = 1
//	u16 y_u16 = 1
//	u16 res_u16 = x_u16 - y_u16
//
//	i16 x_i16 = 1
//	i16 y_i16 = 1
//	i16 res_i16 = x_i16 - y_i16
//
//	u32 x_u32 = 32
//	u32 y_u32 = 32
//	u32 res_u32 = x_u32 - y_u32
//
//	i32 x_i32 = 32
//	i32 y_i32 = 32
//	i32 res_i32 = x_i32 - y_i32
//
//	u64 x_u64 = 64
//	u64 y_u64 = 64
//	u64 res_u64 = x_u64 - y_u64
//
//	i64 x_i64 = 64
//	i64 y_i64 = 64
//	i64 resiu64 = x_i64 - y_i64
//
//	ret 1
//}
//
//fn myfn2(i32 arg1, i32 arg2, i32 arg3, i32 arg4) -> i32 {
//	ret 0
//}
//
//fn myfn3(u8 arg1, u16 arg2, u32 arg3, u64 arg4) -> i32 {
//	ret 0
//}
//
//fn myfn4(i64 arg1, i32 arg2, i16 arg3, i8 arg4) -> i32 {
//	ret 0
//}

fn main() -> i32 {
	//SetConsoleOutputCP(65001)

	//let str = "Hello Brisk!"
	//puts("Hello Brisk!")
	//myfn(1, 2, 3, 4)

	//i32 x = 10
	//i32 y = 4
	//i32 res = x * y
	//
	//printf("asd %d", res)
	//putchar(10)

	i32 x = 77
	i32 y = 7
	i32 result = x / y
	
	printf("Result = %d", result)
	putchar(10)

	ret 0
}